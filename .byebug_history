exit
html_document.search('#top-tracks tr.chartlist-row td[itemprop="name"]').first.text.strip
html_document.search('#top-tracks tr.chartlist-row td[itemprop="name"]').first.text
html_document.search('#top-tracks tr.chartlist-row td[itemprop="name"]').first
html_document.search('#top-tracks tr.chartlist-row td[itemprop="name"]').count
html_document.search("#top-tracks tr.chartlist-row").count
html_document.search("#top-tracks tr").count
html_document.search("#top-tracks").count
html_document.search("#top-tracks")
html_document.search("#top-artist")
html_document = Nokogiri::HTML.parse(html_content)
Nokogiri::HTML.parse(html_content).class
Nokogiri::HTML.parse(html_content)
html_content = open(url).read
Nokogiri::HTML.parse(html_content)
open(url).read.class
open(url).read
url
exit
user["public_repos"]
user = JSON.parse(serialized_user)
JSON.parse(serialized_user)
serialized_user = open(url).read
open(url).read
open(url)
url
exit
JSON.generate(beers_hash).class
JSON.generate(beers_hash)
exit
beers_hash = JSON.parse(serialized_beers)
serialized_beers = File.open(filepath)
exit
JSON.parse(serialized_beers)["beers"].first
JSON.parse(serialized_beers)["beers"].class
JSON.parse(serialized_beers)["beers"]
JSON.parse(serialized_beers)
JSON.parse(serialized_beers).class
JSON.parse(serialized_beers)
serialized_beers = File.open(filepath).read
File.open(filepath).read.class
File.open(filepath).read
File.open(filepath).class
File.open(filepath)
c
row.headers
row.header?(:name)
row.header?
row.methods
row.keys
row
row[0]
row
exit
c
row["Name"]
row["name"]
row["Name"]
row.class
row
exit
next
nex
row
n
row
